-- Table: public.posts

DROP TABLE IF EXISTS public.posts;

CREATE TABLE IF NOT EXISTS public.posts
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    user_id uuid NOT NULL DEFAULT auth.uid(),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    bio character varying COLLATE pg_catalog."default" NOT NULL,
    image_url text COLLATE pg_catalog."default",
    CONSTRAINT posts_pkey PRIMARY KEY (id),
    CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.posts
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.posts
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.posts TO anon;

GRANT ALL ON TABLE public.posts TO authenticated;

GRANT ALL ON TABLE public.posts TO postgres;

GRANT ALL ON TABLE public.posts TO service_role;

GRANT ALL ON TABLE public.posts TO supabase_admin;

-- POLICY: Enable delete for authenticated users on user_id

DROP POLICY IF EXISTS "Enable delete for authenticated users on user_id" ON public.posts;

CREATE POLICY "Enable delete for authenticated users on user_id"
    ON public.posts
    AS PERMISSIVE
    FOR DELETE
    TO authenticated
    USING ((user_id = auth.uid()));

-- POLICY: Enable insert for authenticated users on user_id

DROP POLICY IF EXISTS "Enable insert for authenticated users on user_id" ON public.posts;

CREATE POLICY "Enable insert for authenticated users on user_id"
    ON public.posts
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((user_id = auth.uid()));

-- POLICY: Enable select for authenticated users

DROP POLICY IF EXISTS "Enable select for authenticated users" ON public.posts;

CREATE POLICY "Enable select for authenticated users"
    ON public.posts
    AS PERMISSIVE
    FOR SELECT
    TO authenticated
    USING (true);

-- POLICY: Enable update for authenticated users on user_id

DROP POLICY IF EXISTS "Enable update for authenticated users on user_id" ON public.posts;

CREATE POLICY "Enable update for authenticated users on user_id"
    ON public.posts
    AS PERMISSIVE
    FOR UPDATE
    TO authenticated
    USING ((user_id = auth.uid()))
    WITH CHECK ((user_id = auth.uid()));

INSERT  into storage.buckets (id, name, public) 
VALUES  ('images', 'images', true)
ON CONFLICT DO NOTHING;

CREATE POLICY "Enable access for authenticated users only"
    ON storage.objects
    AS PERMISSIVE
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);
